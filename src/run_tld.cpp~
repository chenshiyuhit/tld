
//ros initial
#include <ros/ros.h>

//image convert
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

//TLD
#include <opencv2/opencv.hpp>
#include <tld_utils.h>
#include <iostream>
#include <sstream>
#include <TLD.h>
#include <stdio.h>
#include </opt/ros/indigo/include/geometry_msgs/Pose2D.h>

using namespace cv;
using namespace std;

//Global variables
Rect box;
bool drawing_box = false;
bool gotBB = false;
bool tl = true;
Mat frame;
Mat last_gray;
Mat current_gray;
cv_bridge::CvImagePtr cv_ptr;

FILE  *bb_file = fopen("bounding_boxes.txt","w");    //Output file
TLD tld;     //TLD framework
				
//bounding box mouse callback
void mouseHandler(int event, int x, int y, int flags, void *param)
{
	switch( event )
	{
		case CV_EVENT_MOUSEMOVE:
			if (drawing_box)
			{
				box.width = x-box.x;
				box.height = y-box.y;
			}
			break;
		case CV_EVENT_LBUTTONDOWN:
			drawing_box = true;
			box = Rect( x, y, 0, 0 );
			break;
		case CV_EVENT_LBUTTONUP:
			drawing_box = false;
			if( box.width < 0 )
			{
				box.x += box.width;
				box.width *= -1;
			}
			if( box.height < 0 )
			{
				box.y += box.height;
				box.height *= -1;
			}
			gotBB = true;
			break;
	}
}

//read parameters in parameters.yml
void read_options(int argc, char** argv,FileStorage &fs)
{
	for (int i=0;i<argc;i++)
	{
		if (strcmp(argv[i],"-p")==0)
		{
			if (argc>i)
			{
				fs.open(argv[i+1], FileStorage::READ);
			}
		}
	}
}

//image convert callback function
void imageCb(const sensor_msgs::ImageConstPtr& msg)
{
	try
	{
		cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
	}
	catch (cv_bridge::Exception& e)
	{
		ROS_ERROR("cv_bridge exception: %s", e.what());
	    return;
	}
	
	frame = cv_ptr->image;
//	cvtColor(frame, last_gray, CV_RGB2GRAY);
	
//	cv::imshow("Gray", last_gray);
	cv::imshow("TLD", frame);
//	cv::waitKey(3);    //time between two subscribe
	cvtColor(frame, current_gray, CV_RGB2GRAY);
	printf("chenshiyu11111111\n");   //always run
}


int main(int argc, char** argv)
{
	ros::init(argc, argv, "run_tld");
	
	ros::NodeHandle csy;
	
	ros::Publisher pose_pub;
    pose_pub   = csy.advertise<geometry_msgs::Pose2D>("TLDpose",100);
	        
	image_transport::ImageTransport it_(csy);
	image_transport::Subscriber image_sub_;	
	image_sub_ = it_.subscribe("/camera/image_raw", 1000, imageCb);
				
	cvNamedWindow("TLD",CV_WINDOW_NORMAL);
//	cvNamedWindow("Gray",CV_WINDOW_NORMAL);
	cvNamedWindow("Examples",CV_WINDOW_NORMAL);
	
	cvSetMouseCallback( "TLD", mouseHandler, NULL );

	//Read options
	FileStorage fs;
	read_options(argc,argv,fs);
	tld.read(fs.getFirstTopLevelNode());
	
	BoundingBox pbox;
	vector<Point2f> pts1;
	vector<Point2f> pts2;
	int  frames = 1;
	int  detections = 1;
	bool status = true;
	bool init_flag = false;

	printf("chenshiyu\n");   //run once
	
//	ros::spin();   //always call the callback function
	while(ros::ok())
	{	
		printf("chenshiyu111222\n");  
		
		while(!gotBB)  
		{
			ros::spinOnce();   //call the callback function once
			drawBox(frame,box);
//			cv::waitKey(3);
//			imshow("TLD", frame);
			if (cvWaitKey(33) == 'q')
				return 0;
			if(gotBB)
			{
				init_flag = true;
			}
		}
		cvSetMouseCallback( "TLD", NULL, NULL );
		printf("Initial Bounding Box = x:%d y:%d h:%d w:%d\n",box.x,box.y,box.width,box.height);
		
		if(init_flag)
		{
			ros::spinOnce();
			cvtColor(frame, last_gray, CV_RGB2GRAY);
			tld.init(last_gray,box,bb_file);   //initial the TLD

			init_flag = false;
		}
		
		ros::spinOnce(); //run two callback
		//TLD process
		tld.processFrame(last_gray,current_gray,pts1,pts2,pbox,status,tl,bb_file);
//		cv::waitKey(30);
		if (status)
		{		
			drawPoints(frame,pts2,Scalar(0,255,0));
			drawBox(frame,pbox,Scalar(0,0,255),3);

			ostringstream printText2;
			printText2<<"X:"<<pbox.x+pbox.width/2<<","<<"Y:"<<pbox.y+pbox.height/2;
			putText(frame,printText2.str(),Point(pbox.x,pbox.y-5),FONT_HERSHEY_SIMPLEX,0.6,CV_RGB(255,255,0),2);

			//csy
			geometry_msgs::Pose2D pose;
			pose.x = pbox.x+pbox.width/2;
			pose.y = pbox.y+pbox.height/2;
			pose.theta = atan2(pose.y-120,pose.x-160)*180/3.14159;
			pose_pub.publish(pose);

			detections++;
		}
		imshow("TLD", frame);
		swap(last_gray,current_gray);
		pts1.clear();
		pts2.clear();
		frames++;
		printf("Detection rate: %d/%d\n",detections,frames);
		if (cvWaitKey(33) == 'q')
			break;
	}
	
	printf("chenshiyu2222\n");  //after ctrl+c, run once
	fclose(bb_file);
	return 0;
}
